# First strategy that I have developed that can be considered an ML based strategy. This strategy used logistic regression from the package "sklearn" to try and "predict" the direction
# of future returns (positve or negative returns). It is a very simple model, which only considers one variable (historical/past returns) leading it to have weak performance. Usually
# giving me a hit ratio of just above 50%. This was the first time I created a more complex OOP were I split data into training and test sets to train an ML model. All parameters can be 
# edited, the size of the test set is automatically set to 70% of data but this can be manually changed. Since this is vectorized back testing OOP, with an ML aspect to it, it is very prone 
# to look ahead bias. Results from the test data set can significantly differ from the performance on the training set. Most times the strategy becomes unprofitable when considering 
# trading costs due to the the low hit rate of the ML model. 



import pandas as pd
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.multiclass import OneVsRestClassifier 
import matplotlib.pyplot as plt
plt.style.use("seaborn-v0_8")

class MLBacktester():

    def __init__(self, symbol, start, end, tc):

        self.symbol = symbol
        self.start = start
        self.end = end
        self.tc = tc
        self.model = OneVsRestClassifier(LogisticRegression(C = 1e6, max_iter = 100000))
        self.results = None
        self.get_data()
    
    def __repr__(self):
        rep = "MLBacktester(symbol = {}, start = {}, end = {}, tc = {})"
        return rep.format(self.symbol, self.start, self.end, self.tc)
                             
    def get_data(self):

        raw = pd.read_csv("test_set.csv", parse_dates = ["time"], index_col = "time")
        raw = raw[self.symbol].to_frame().dropna()
        raw = raw.loc[self.start:self.end]
        raw.rename(columns={self.symbol: "price"}, inplace=True)
        raw["returns"] = np.log(raw / raw.shift(1))
        self.data = raw
                             
    def split_data(self, start, end):

        data = self.data.loc[start:end].copy()
        return data
    
    def prepare_features(self, start, end):

        self.data_subset = self.split_data(start, end)
        self.feature_columns = []
        for lag in range(1, self.lags + 1):
            col = "lag{}".format(lag)
            self.data_subset[col] = self.data_subset["returns"].shift(lag)
            self.feature_columns.append(col)
        self.data_subset.dropna(inplace=True)

    def scale_features(self, recalc = True): 

        if recalc:
            self.means = self.data_subset[self.feature_columns].mean()
            self.stand_devs = self.data_subset[self.feature_columns].std()
        
        self.data_subset[self.feature_columns] = (self.data_subset[self.feature_columns] - self.means) / self.stand_devs
        
    def fit_model(self, start, end):
 
        self.prepare_features(start, end)
        self.scale_features(recalc = True)
        self.model.fit(self.data_subset[self.feature_columns], np.sign(self.data_subset["returns"]))
        
    def test_strategy(self, train_ratio = 0.7, lags = 5):

        self.lags = lags
                  
        full_data = self.data.copy()
        split_index = int(len(full_data) * train_ratio)
        split_date = full_data.index[split_index-1]
        train_start = full_data.index[0]
        test_end = full_data.index[-1]

        self.fit_model(train_start, split_date)
        self.prepare_features(split_date, test_end)
        self.scale_features(recalc = False)
                  

        predict = self.model.predict(self.data_subset[self.feature_columns])
        self.data_subset["pred"] = predict
        

        self.data_subset["strategy"] = self.data_subset["pred"] * self.data_subset["returns"]
        self.data_subset["trades"] = self.data_subset["pred"].diff().fillna(0).abs()

        self.data_subset.strategy = self.data_subset.strategy - self.data_subset.trades * self.tc

    
        self.data_subset["creturns"] = self.data_subset["returns"].cumsum().apply(np.exp)
        self.data_subset["cstrategy"] = self.data_subset['strategy'].cumsum().apply(np.exp)
        self.results = self.data_subset
        
        perf = self.results["cstrategy"].iloc[-1] 
        outperf = perf - self.results["creturns"].iloc[-1] 
        
        return round(perf, 6), round(outperf, 6)
        
    def plot_results(self):
    
        if self.results is None:
            print("Run test_strategy() first.")
        else:
            title = "Logistic Regression: {} | TC = {}".format(self.symbol, self.tc)
            self.results[["creturns", "cstrategy"]].plot(title=title, figsize=(12, 8))
